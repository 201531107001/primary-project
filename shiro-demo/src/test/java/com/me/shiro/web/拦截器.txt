                                        拦截器机制
Shiro 使用了与 Servlet 一样的 Filter 接口进行扩展
1 、NameableFilter
NameableFilter给 Filter 起个名字，如果没有设置默认就是 FilterName；还记得之前的如 authc
吗？当我们组装拦截器链时会根据这个名字找到相应的拦截器实例；
2 、OncePerRequestFilter
OncePerRequestFilter 用于防止多次执行 Filter 的；也就是说一次请求只会走一次拦截器链；
另外提供 enabled 属性，表示是否开启该拦截器实例，默认 enabled=true 表示开启，如果不
想让某个拦截器工作，可以设置为 false 即可。
3 、ShiroFilter
ShiroFilter 是整个 Shiro 的入口点，用于拦截需要安全控制的请求进行处理，这个之前已经用过了。
4 、AdviceFilter
AdviceFilter 提供了 AOP 风格的支持，类似于 SpringMVC 中的 Interceptor：
boolean preHandle(ServletRequest request, ServletResponse response) throws Exception
void postHandle(ServletRequest request, ServletResponse response) throws Exception
void afterCompletion(ServletRequest request,ServletResponse response,Exception exception)
throws Exception;
preHandler：类似于 AOP 中的前置增强；在拦截器链执行之前执行；如果返回 true 则继续
拦截器链；否则中断后续的拦截器链的执行直接返回；进行预处理（如基于表单的身份验证、授权）
postHandle：类似于 AOP 中的后置返回增强；在拦截器链执行完成后执行；进行后处理（如记录执行时间之类的）；
afterCompletion：类似于 AOP 中的后置最终增强；即不管有没有异常都会执行；可以进行
清理资源（如接触 Subject 与线程的绑定之类的）；
5 、PathMatchingFilter
PathMatchingFilter 提供了基于 Ant 风格的请求路径匹配功能及拦截器参数解析的功能，如“roles[admin,user]”
自动根据“，”分割解析到一个路径参数配置并绑定到相应的路径
boolean pathsMatch(String path, ServletRequest request)
boolean onPreHandle(ServletRequest request, ServletResponse response,Object mappedValue)
throws Exception
pathsMatch：该方法用于 path 与请求路径进行匹配的方法；如果匹配返回 true；
onPreHandle：在 preHandle 中，当 pathsMatch 匹配一个路径后，会调用 opPreHandler 方法
并将路径绑定参数配置传给 mappedValue；然后可以在这个方法中进行一些验证（如角色
授权），如果验证失败可以返回 false 中断流程；默认返回 true；也就是说子类可以只实现
onPreHandle 即可，无须实现 preHandle。如果没有 path 与请求路径匹配，默认是通过的（即preHandle 返回 true）。
6 、AccessControlFilter
AccessControlFilter 提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等：
abstract boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;
boolean  onAccessDenied(ServletRequest  request,  ServletResponse  response,  Object mappedValue) throws Exception;
abstract boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception;
isAccessAllowed：表示是否允许访问；mappedValue 就是[urls]配置中拦截器参数部分，如
果允许访问返回 true，否则 false；
onAccessDenied：表示当访问拒绝时是否已经处理了；如果返回 true 表示需要继续处理；
如果返回 false 表示该拦截器实例已经处理了，将直接返回即可。
onPreHandle 会自动调用这两个方法决定是否继续处理：
    boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue)
        throws Exception {
        return isAccessAllowed(request, response, mappedValue) || onAccessDenied(request,
            response, mappedValue);
    }
另外 AccessControlFilter 还提供了如下方法用于处理如登录成功后/重定向到上一个请求：
void setLoginUrl(String loginUrl) //身份验证时使用，默认/login.jsp
String getLoginUrl()
Subject getSubject(ServletRequest request, ServletResponse response) //获取 Subject 实例
boolean isLoginRequest(ServletRequest request, ServletResponse response)//当前请求是否是登录请求
//将当前请求保存起来并重定向到登录页面
void saveRequestAndRedirectToLogin(ServletRequest request, ServletResponse response)throws IOException 
void saveRequest(ServletRequest request) //将请求保存起来，如登录成功后再重定向回该请求
void redirectToLogin(ServletRequest request, ServletResponse response) //重定向到登录页面

到 此 基 本 的 拦 截 器 就 完 事 了 ， 如 果 我 们 想 进 行 访 问的 控 制 就 可 以 继 承
AccessControlFilter；如果我们要添加一些通用数据我们可以直接继承 PathMatchingFilter。


                                        拦截器链
Shiro 对 Servlet 容器的 FilterChain 进行了代理，即 ShiroFilter 在继续 Servlet 容器的 Filter
链的执行之前，通过 ProxiedFilterChain 对 Servlet 容器的 FilterChain 进行了代理；即先走
Shiro 自己的 Filter 体系，然后才会委托给 Servlet 容器的 FilterChain 进行 Servlet 容器级别
的 Filter 链执行；Shiro 的 ProxiedFilterChain 执行流程：1、先执行 Shiro 自己的 Filter 链；2、
再执行 Servlet 容器的 Filter 链（即原始的 Filter）。
而 ProxiedFilterChain 是通过 FilterChainResolver 根据配置文件中[urls]部分是否与请求的
URL 是否匹配解析得到的。

Shiro 内 部 提 供 了 一 个 路 径 匹 配 的 FilterChainResolver 实 现 ：
PathMatchingFilterChainResolver，其根据[urls]中配置的 url 模式（默认 Ant 风格）=拦截器
链和请求的 url 是否匹配来解析得到配置的拦截器链的；而 PathMatchingFilterChainResolver
内部通过 FilterChainManager 维护着拦截器链，比如 DefaultFilterChainManager 实现维护着
url 模式与拦截器链的关系。因此我们可以通过 FilterChainManager 进行动态动态增加 url
模式与拦截器链的关系。
DefaultFilterChainManager 会默认添加 org.apache.shiro.web.filter.mgt.DefaultFilter 中声明的拦截器                                  
    public enum DefaultFilter {
        anon(AnonymousFilter.class),
        authc(FormAuthenticationFilter.class),
        authcBasic(BasicHttpAuthenticationFilter.class),
        logout(LogoutFilter.class),
        noSessionCreation(NoSessionCreationFilter.class),
        perms(PermissionsAuthorizationFilter.class),
        port(PortFilter.class),
        rest(HttpMethodPermissionFilter.class),
        roles(RolesAuthorizationFilter.class),
        ssl(SslFilter.class),
        user(UserFilter.class);
    }

                                    自定义拦截器
通过自定义自己的拦截器可以扩展一些功能，诸如动态 url-角色/权限访问控制的实现、根
据 Subject 身份信息获取用户信息绑定到 Request（即设置通用数据）、验证码验证、在线
用户信息的保存等等，因为其本质就是一个 Filter；所以 Filter 能做的它就能做。
1、  扩展 OncePerRequestFilter OncePerRequestFilter 保证一次请求只调用一次 doFilterInternal，
即如内部的 forward 不会再多执行一次 doFilterInternal    
2、 扩展 AdviceFilter               
AdviceFilter 提供了 AOP 的功能，其实现和 SpringMVC 中的 Interceptor 思想一样
3 、PathMatchingFilter
PathMatchingFilter 继承了 AdviceFilter，提供了 url 模式过滤的功能，如果需要对指定的请
求进行处理，可以扩展 PathMatchingFilter
    preHandle：会进行 url 模式与请求 url 进行匹配，如果匹配会调用 onPreHandle；如果没有
    配置 url 模式/没有 url 模式匹配，默认直接返回 true；
    onPreHandle：如果 url 模式与请求 url 匹配，那么会执行 onPreHandle，并把该拦截器配置
    的参数传入。默认什么不处理直接返回 true。      
4、  扩展 AccessControlFilter
AccessControlFilter 继承了 PathMatchingFilter，并扩展了了两个方法
isAccessAllowed：即是否允许访问，返回 true 表示允许；
onAccessDenied：表示访问拒绝时是否自己处理，如果返回 true 表示自己不处理且继续拦
截器链执行，返回 false 表示自己已经处理了（比如重定向到另一个页面）。
5、基于 表 单登录拦截器
之前我们已经使用过 Shiro 内置的基于表单登录的拦截器了，此处自己做一个类似的基于表单登录的拦截器。
    1、首先判断是否已经登录过了，如果已经登录过了继续拦截器链即可；
    2、如果没有登录，看看是否是登录请求，如果是 get 方法的登录页面请求，则继续拦截器
    链（到请求页面），否则如果是 get 方法的其他页面请求则保存当前请求并重定向到登录页面；
    3、如果是 post 方法的登录页面表单提交请求，则收集用户名/密码登录即可，如果失败了
    保存错误消息到“shiroLoginFailure”并返回到登录页面；
    4、如果登录成功了，且之前有保存的请求，则重定向到之前的这个请求，否则到默认的成功页面。
6、 任意 角色授权拦截器
Shiro 提供 roles 拦截器，其验证用户拥有所有角色，没有提供验证用户拥有任意角色的拦截器。
此处可以继承 AuthorizationFilter 实现，其提供了授权相关的基础代码。另外可以参考 Shiro
内嵌的 RolesAuthorizationFilter 的源码，只是实现 hasAllRoles 逻辑。
    流程：
    1、首先判断用户有没有任意角色，如果没有返回 false，将到 onAccessDenied 进行处理；
    2、如果用户没有角色，接着判断用户有没有登录，如果没有登录先重定向到登录；
    3、如果用户没有角色且设置了未授权页面（unauthorizedUrl），那么重定向到未授权页面；
    否则直接返回 401 未授权错误码。
    
                                 默认拦截器
Shiro 内置了很多默认的拦截器，比如身份验证、授权等相关的。默认拦截器可以参考
org.apache.shiro.web.filter.mgt.DefaultFilter 中的枚举拦截器

authc  FormAuthenticationFilter   基于表单的拦截器
authcBasic  BasicHttpAuthenticationFilter Basic HTTP 身份验证拦截器，主要属性：applicationName：弹出登录框显示的信息（application）；
logout  LogoutFilter 退出拦截器，主要属性：redirectUrl：退出 成 功 后 重 定 向 的 地址 （ /） ;示 例“/logout=logout”
user UserFilter 用户拦截器，用户已经身份验证/记住我登录的都可；示例“/**=user”
anon  AnonymousFilter  匿名拦截器，即不需要登录即可访问；一般 用 于 静 态 资 源 过 滤 ； 示 例“/static/**=anon”

roles  RolesAuthorizationFilter  角色授权拦截器，验证用户是否拥有所有角色；
perms  PermissionsAuthorizationFilter 权限授权拦截器，验证用户是否拥有所有权 限 ；
port  PortFilter 端口拦截器，主要属性：port（80）：可以通过的端口；示例“/test= port[80]”，
                如果用户访问该页面是非 80，将自动将请求端口改为 80 并重定向到该 80 端口，其他路径/参数等都一样
rest  HttpMethodPermissionFilter  rest 风格拦截器，自动根据请求方法构建权 限 字 符 串
ssl   SslFilter SSL 拦截器，只有请求协议是 https 才能通过；否则自动跳转会 https 端口（443）；其他和 port 拦截器一样；

noSessionCreation NoSessionCreationFilter 不 创 建 会 话 拦 截 器 
这些默认的拦截器会自动注册，可以直接在 ini 配置文件中通过“拦截器名.属性”设置其属性
perms.unauthorizedUrl=/unauthorized
另外如果某个拦截器不想使用了可以直接通过如下配置直接禁用：perms.enabled=false