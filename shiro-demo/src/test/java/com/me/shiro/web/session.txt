                        会话管理
    Shiro 提供了完整的企业级会话管理功能，不依赖于底层容器（如 web 容器 tomcat），不管
JavaSE 还是 JavaEE 环境都可以使用，提供了会话管理、会话事件监听、会话存储/持久化、
容器无关的集群、失效/过期支持、对 Web 的透明支持、SSO 单点登录的支持等特性。即
直接使用 Shiro 的会话管理可以直接替换如 Web 容器的会话管理。

        会话
        所谓会话，即用户访问应用时保持的连接关系，在多次交互中应用能够识别出当前访问的
用户是谁，且可以在多次交互中保存一些数据。如访问一些网站时登录成功后，网站可以
记住用户，且在退出之前都可以识别当前用户是谁。\
    Shiro 的会话支持不仅可以在普通的 JavaSE 应用中使用，也可以在 JavaEE 应用中使用，如
web 应用。且使用方式是一致的。
    login("classpath:shiro.ini", "zhang", "123");
    Subject subject = SecurityUtils.getSubject();
    Session session = subject.getSession();
登录成功后使用 Subject.getSession()即可获取会话；其等价于 Subject.getSession(true)，即如
果当前没有创建 Session 对象会创建一个；另外 Subject.getSession(false)，如果当前没有创
建 Session 则返回 null（不过默认情况下如果启用会话存储功能的话在创建 Subject 时会主
动创建一个 Session）
session.getId();获取当前会话的唯一标识
session.getHost();获取当前 Subject 的主机地址，该地址是通过 HostAuthenticationToken.getHost()提供的
session.getTimeout();
session.setTimeout(毫秒);获取/设置当前 Session 的过期时间；如果不设置默认是会话管理器的全局过期时间。
session.setAttribute("key", "123");
Assert.assertEquals("123", session.getAttribute("key"));
session.removeAttribute("key");设置/获取/删除会话属性；在整个会话范围内都可以对这些属性进行操作。

                            会话管理器
会话管理器管理着应用中所有 Subject 的会话的创建、维护、删除、失效、验证等工作。是
Shiro 的核心组件，顶层组件 SecurityManager 直接继承了 SessionManager，且提供了
SessionsSecurityManager 实 现 直 接 把 会 话 管 理 委 托 给 相 应 的 SessionManager ，
DefaultSecurityManager 及 DefaultWebSecurityManager 默认 SecurityManager 都继承了
SessionsSecurityManager。      
                      
SecurityManager 提供了如下接口：
    Session start(SessionContext context); //启动会话
    Session getSession(SessionKey key) throws SessionException; //根据会话 Key 获取会话
另外用于 Web 环境的 WebSessionManager 又提供了如下接口
    boolean isServletContainerSessions();//是否使用 Servlet 容器的会话
Shiro 还提供了 ValidatingSessionManager 用于验资并过期会话：
    void validateSessions();//验证所有会话是否过期

Shiro 提供了三个默认实现：
DefaultSessionManager：DefaultSecurityManager 使用的默认实现，用于 JavaSE 环境；
ServletContainerSessionManager：DefaultWebSecurityManager 使用的默认实现，用于 Web环境，其直接使用 Servlet 容器的会话；
DefaultWebSessionManager ： 用 于 Web 环 境 的 实 现 ， 可 以 替 代ServletContainerSessionManager，自己维护着会话，直接废弃了 Servlet 容器的会话管理。

替换 SecurityManager 默认的 SessionManager 可以在 ini 中配置（shiro.ini）：
    [main]
    sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager
    securityManager.sessionManager=$sessionManager
Web 环境下的 ini 配置(shiro-web.ini)：
    [main]
    sessionManager=org.apache.shiro.web.session.mgt.ServletContainerSessionManager
    securityManager.sessionManager=$sessionManager
另外可以设置会话的全局过期时间（毫秒为单位），默认 30 分钟：
    sessionManager. globalSessionTimeout=1800000
默认情况下 globalSessionTimeout 将应用给所有 Session。可以单独设置每个 Session 的
timeout 属性来为每个 Session 设置其超时时间。

另外如果使用 ServletContainerSessionManager 进行会话管理，Session 的超时依赖于底层
Servlet 容器的超时时间，可以在 web.xml 中配置其会话的超时时间（分钟为单位）：
    <session-config>
    <session-timeout>30</session-timeout>
    </session-config>

在 Servlet 容器中，默认使用 JSESSIONID Cookie 维护会话，且会话默认是跟容器绑定的；
在某些情况下可能需要使用自己的会话机制，此时我们可以使用DefaultWebSessionManager
来维护会话：
    sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie
    sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager
    sessionIdCookie.name=sid
    #sessionIdCookie.domain=sishuok.com
    #sessionIdCookie.path=
    sessionIdCookie.maxAge=1800
    sessionIdCookie.httpOnly=true
    sessionManager.sessionIdCookie=$sessionIdCookie
    sessionManager.sessionIdCookieEnabled=true
    securityManager.sessionManager=$sessionManager
sessionIdCookie 是 sessionManager 创建会话 Cookie 的模板：
sessionIdCookie.name：设置 Cookie 名字，默认为 JSESSIONID；
sessionIdCookie.domain：设置 Cookie 的域名，默认空，即当前访问的域名；
sessionIdCookie.path：设置 Cookie 的路径，默认空，即存储在域名根下；
sessionIdCookie.maxAge：设置 Cookie 的过期时间，秒为单位，默认-1 表示关闭浏览器时
过期 Cookie；
sessionIdCookie.httpOnly：如果设置为 true，则客户端不会暴露给客户端脚本代码，使用
HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6
及以上版本的规范的 Servlet 容器支持；
sessionManager.sessionIdCookieEnabled：是否启用/禁用 Session Id Cookie，默认是启用的；
如果禁用后将不会设置 Session Id Cookie，即默认使用了 Servlet 容器的 JSESSIONID，且通
过 URL 重写（URL 中的“;JSESSIONID=id”部分）保存 Session Id。
    
                                    会话监听器 
会话监听器用于监听会话创建、过期及停止事件：   
public class MySessionListener1 implements SessionListener {
    @Override
    public void onStart(Session session) {//会话创建时触发
        System.out.println("会话创建：" + session.getId());
    }
    @Override
    public void onExpiration(Session session) {//会话过期时触发
        System.out.println("会话过期：" + session.getId());
    }
    @Override
    public void onStop(Session session) {//退出/会话过期时触发
        System.out.println("会话停止：" + session.getId());
    }
}    
如果只想监听某一个事件，可以继承 SessionListenerAdapter 实现：   
public class MySessionListener2 extends SessionListenerAdapter {
    @Override
    public void onStart(Session session) {
        System.out.println("会话创建：" + session.getId());
    }
}   
在 shiro-web.ini 配置文件中可以进行如下配置设置会话监听器：   
    sessionListener1=com.github.zhangkaitao.shiro.chapter10.web.listener.MySessionListener1
    sessionListener2=com.github.zhangkaitao.shiro.chapter10.web.listener.MySessionListener2
    sessionManager.sessionListeners=$sessionListener1,$sessionListener2    
   
                        会话存储/持久化 
Shiro 提供 SessionDAO 用于会话的 CRUD，即 DAO（Data Access Object）模式实现：                        
    //如 DefaultSessionManager 在创建完 session 后会调用该方法；如保存到关系数据库/文件
          系统/NoSQL 数据库；即可以实现会话的持久化；返回会话 ID；主要此处返回的
    ID.equals(session.getId())；
    Serializable create(Session session);
    //根据会话 ID 获取会话
    Session readSession(Serializable sessionId) throws UnknownSessionException;
    //更新会话；如更新会话最后访问时间/停止会话/设置超时时间/设置移除属性等会调用
    void update(Session session) throws UnknownSessionException;
    //删除会话；当会话过期/会话停止（如用户退出时）会调用
    void delete(Session session);
    //获取当前所有活跃用户，如果用户量多此方法影响性能                        
AbstractSessionDAO提供了SessionDAO的基础实现，如生成会话ID等；
CachingSessionDAO提供了对开发者透明的会话缓存的功能，只需要设置相应的 CacheManager 即可；
MemorySessionDAO 直接在内存中进行会话维护；
EnterpriseCacheSessionDAO 提供了缓存功能的会话维护，默认情况下使用 MapCache 实现，
    内部使用 ConcurrentHashMap 保存缓存的会话。 
                          
可以通过如下配置设置 SessionDAO：                        
    sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
    sessionManager.sessionDAO=$sessionDAO                       
Shiro 提供了使用 Ehcache 进行会话存储，Ehcache 可以配合 TerraCotta 实现容器无关的分布式集群。                        
首先在 pom.xml 里添加如下依赖：                       
    <dependency>
        <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-ehcache</artifactId>
        <version>1.2.2</version>
    </dependency>                    
接着配置 shiro-web.ini 文件：                        
    sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
    sessionDAO. activeSessionsCacheName=shiro-activeSessionCache
    sessionManager.sessionDAO=$sessionDAO
    cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
    cacheManager.cacheManagerConfigFile=classpath:ehcache.xml
    securityManager.cacheManager = $cacheManager                       
        sessionDAO. activeSessionsCacheName ： 设 置 Session 缓 存 名 字 ， 默 认 就 是shiro-activeSessionCache；
        cacheManager：缓存管理器，用于管理缓存的，此处使用 Ehcache 实现；
        cacheManager.cacheManagerConfigFile：设置 ehcache 缓存的配置文件；
        securityManager.cacheManager：设置 SecurityManager 的 cacheManager，会自动设置实现了
        CacheManagerAware 接口的相应对象，如 SessionDAO 的 cacheManager；                        
然后配置 ehcache.xml：                        
<cache name="shiro-activeSessionCache"
    maxEntriesLocalHeap="10000"
    overflowToDisk="false"
    eternal="false"
    diskPersistent="false"
    timeToLiveSeconds="0"
    timeToIdleSeconds="0"
    statistics="true"/>                       
Cache 的名字为 shiro-activeSessionCache，即设置的 sessionDAO 的 activeSessionsCacheName属性值。                        
另外可以通过如下 ini 配置设置会话 ID 生成器：                       
    sessionIdGenerator=org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
    sessionDAO.sessionIdGenerator=$sessionIdGenerator                      
用于生成会话 ID，默认就是 JavaUuidSessionIdGenerator，使用 java.util.UUID 生成。

如果自定义实现 SessionDAO，继承 CachingSessionDAO 即可
















                        